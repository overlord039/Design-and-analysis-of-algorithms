#Write a program to implement Prim's algorithm
import java.util.Arrays; 
import java.util.Scanner; 
class KruskalsAlgorithm { 
 static class Edge implements Comparable<Edge> { 
 int src, dest, weight; 
 public int compareTo(Edge compareEdge) { 
 return this.weight - compareEdge.weight; 
 } 
 } 
 static class Subset { 
 int parent, rank; 
 } 
 int V, E; 
 Edge[] edge; 
 public KruskalsAlgorithm(int v, int e) { 
 V = v; 
 E = e; 
 edge = new Edge[E]; 
 for (int i = 0; i < e; ++i) { 
 edge[i] = new Edge(); 
 } 
 } 
 int find(Subset subsets[], int i) { 
 if (subsets[i].parent != i) { 
 subsets[i].parent = find(subsets, subsets[i].parent); 
 } 
 return subsets[i].parent; 
 } 
 void union(Subset subsets[], int x, int y) { 
 int xroot = find(subsets, x); 
 int yroot = find(subsets, y); 
 if (subsets[xroot].rank < subsets[yroot].rank) { 
 subsets[xroot].parent = yroot; 
 } else if (subsets[xroot].rank > subsets[yroot].rank) { 
 subsets[yroot].parent = xroot; 
 } else { 
 subsets[yroot].parent = xroot; 
 subsets[xroot].rank++; 
 } 
 } 
 void kruskalMST() { 
 Edge result[] = new Edge[V]; 
 int e = 0; 
 int i = 0; 
 for (i = 0; i < V; ++i) { 
 result[i] = new Edge(); 
 } 
 Arrays.sort(edge); 
 Subset subsets[] = new Subset[V]; 
 for (i = 0; i < V; ++i) { 
 subsets[i] = new Subset(); 
 } 
 for (int v = 0; v < V; ++v) { 
 subsets[v].parent = v; 
 subsets[v].rank = 0; 
 } 
 i = 0; 
 while (e < V - 1) { 
 Edge nextEdge = edge[i++]; 
 int x = find(subsets, nextEdge.src); 
 int y = find(subsets, nextEdge.dest); 
 if (x != y) { 
 result[e++] = nextEdge; 
 union(subsets, x, y); 
 } 
 } 
 int minCost = 0; 
 System.out.println("Edges in the Minimum Spanning Tree:"); 
 for (i = 0; i < e; ++i) { 
 System.out.println(result[i].src + " -- " + result[i].dest + " 
== " + result[i].weight); 
 minCost += result[i].weight; 
 } 
 System.out.println("Minimum Cost of MST: " + minCost); 
 } 
 public static void main(String[] args) { 
 Scanner scanner = new Scanner(System.in); 
 System.out.print("Enter the number of vertices: "); 
 int V = scanner.nextInt(); 
 System.out.print("Enter the number of edges: "); 
 int E = scanner.nextInt(); 
 KruskalsAlgorithm graph = new KruskalsAlgorithm(V, E); 
 System.out.println("Enter the details of each edge (source 
destination weight):"); 
 for (int i = 0; i < E; i++) { 
 System.out.print("Enter source for edge " + (i + 1) + ": "); 
 graph.edge[i].src = scanner.nextInt(); 
 System.out.print("Enter destination for edge " + (i + 1) + ": 
"); 
 graph.edge[i].dest = scanner.nextInt(); 
 System.out.print("Enter weight for edge " + (i + 1) + ": "); 
 graph.edge[i].weight = scanner.nextInt(); 
 } 
 graph.kruskalMST(); 
 scanner.close(); 
 } 
}
