#Write a program to implement Prim's algorithm
import java.util.*; 
class PrimAlgorithm { 
 static class Edge { 
 int destination, weight; 
 public Edge(int destination, int weight) { 
 this.destination = destination; 
 this.weight = weight; 
 } 
 } 
 private int vertices; 
 private List<List<Edge>> graph; 
 public PrimAlgorithm(int vertices) { 
 this.vertices = vertices; 
 this.graph = new ArrayList<>(vertices); 
 for (int i = 0; i < vertices; i++) { 
 this.graph.add(new ArrayList<>()); 
 } 
 } 
 public void addEdge(int source, int destination, int weight) { 
 Edge edge1 = new Edge(destination, weight); 
 Edge edge2 = new Edge(source, weight); 
 graph.get(source).add(edge1); 
 graph.get(destination).add(edge2); 
 } 
 public void primMST() { 
 boolean[] inMST = new boolean[vertices]; 
 PriorityQueue<Edge> priorityQueue = new 
PriorityQueue<>(Comparator.comparingInt(e -> e.weight)); 
 int startVertex = 0; 
 inMST[startVertex] = true; 
 priorityQueue.addAll(graph.get(startVertex)); 
 while (!priorityQueue.isEmpty()) { 
 Edge currentEdge = priorityQueue.remove(); 
 if (!inMST[currentEdge.destination]) { 
 System.out.println("Edge: " + startVertex + " - " + 
currentEdge.destination + " Weight: " + currentEdge.weight); 
 startVertex = currentEdge.destination; 
 inMST[startVertex] = true; 
 priorityQueue.addAll(graph.get(startVertex)); 
 } 
 } 
 } 
 public static void main(String[] args) { 
 Scanner scanner = new Scanner(System.in); 
 System.out.print("Enter the number of vertices: "); 
 int vertices = scanner.nextInt(); 
 PrimAlgorithm prim = new PrimAlgorithm(vertices); 
 System.out.println("Enter the edges (source, destination, weight) 
for the graph:"); 
 System.out.println("Enter -1 to finish."); 
 while (true) { 
 System.out.print("Enter source (-1 to finish): "); 
 int source = scanner.nextInt(); 
 if (source == -1) break; 
 System.out.print("Enter destination: "); 
 int destination = scanner.nextInt(); 
 System.out.print("Enter weight: "); 
 int weight = scanner.nextInt(); 
 prim.addEdge(source, destination, weight); 
 } 
 System.out.println("\nMinimum Spanning Tree using Prim's 
Algorithm:"); 
 prim.primMST(); 
 scanner.close(); 
 } 
}
